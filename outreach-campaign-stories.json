[
  {
    "id": "089",
    "project": "Sales Genie",
    "epic": "crm",
    "priority": "CRITICAL",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need a prospects table view so that I can review all imported prospects with filtering and sorting",
    "acceptanceCriteria": [
      "Prospects table displays all imported records",
      "Columns: Name, Role, Company, Email, Phone, Geography, Company Size, Industry, Source, Status",
      "Sortable by any column",
      "Advanced filtering by: Person, Role, Company, Geography, Company Size, Industry",
      "Multi-select filtering (e.g., select multiple industries)",
      "Search functionality across all fields",
      "Pagination for large datasets (2,500+ records)",
      "Export filtered results to CSV",
      "Bulk actions (select all, select filtered)",
      "Mobile-responsive table view"
    ],
    "effort": 8,
    "businessValue": 10,
    "dependencies": ["015", "003"],
    "technicalNotes": "Use React Table or TanStack Table for advanced filtering/sorting. Implement virtual scrolling for performance with large datasets. Store filter state in URL params for shareable links.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "090",
    "project": "Sales Genie",
    "epic": "crm",
    "priority": "CRITICAL",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need to edit prospect records so that I can correct and enrich prospect data",
    "acceptanceCriteria": [
      "Click any prospect row to open edit modal",
      "Edit all fields: Name, Role, Company, Email, Phone, Geography, Company Size, Industry",
      "Add custom notes field for each prospect",
      "Add tags/labels to prospects",
      "Validation: Email format, phone format, required fields",
      "Save changes updates database in real-time",
      "Track edit history (who changed what, when)",
      "Inline editing for quick updates",
      "Bulk edit selected prospects",
      "Undo/redo capability"
    ],
    "effort": 5,
    "businessValue": 8,
    "dependencies": ["089"],
    "technicalNotes": "Use optimistic updates with React Query. Store edit history in separate audit table. Implement field-level validation with Zod.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "091",
    "project": "Sales Genie",
    "epic": "integration",
    "priority": "CRITICAL",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need email enrichment integration so that I can get verified email addresses for prospects",
    "acceptanceCriteria": [
      "Integrate email finding tool (Apollo.io, Hunter.io, or Snov.io)",
      "Bulk email lookup for selected prospects",
      "Display confidence score for each email found",
      "Show verification status (verified, risky, invalid)",
      "Handle API rate limits gracefully with queue system",
      "Cost tracking per email lookup",
      "Fallback to secondary tool if primary fails",
      "Store email source and verification date",
      "Auto-skip prospects with existing verified emails",
      "Progress indicator for bulk operations"
    ],
    "effort": 8,
    "businessValue": 10,
    "dependencies": ["017", "089"],
    "technicalNotes": "Implement job queue with Bull/BullMQ for async processing. Use Redis for rate limit tracking. Store API responses for caching. Consider using multiple providers with waterfall logic.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "092",
    "project": "Sales Genie",
    "epic": "crm",
    "priority": "HIGH",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need to include/exclude prospects individually so that I can control who receives campaigns",
    "acceptanceCriteria": [
      "Checkbox selection for individual prospects",
      "Include/Exclude toggle for each prospect",
      "Visual indicator (color/icon) for excluded prospects",
      "Excluded prospects persist in database",
      "Reason field for exclusion (optional notes)",
      "Bulk include/exclude selected prospects",
      "Filter to show only included/excluded prospects",
      "Exclusion history tracking",
      "Re-include previously excluded prospects",
      "Excluded count shown in campaign selection"
    ],
    "effort": 5,
    "businessValue": 9,
    "dependencies": ["089"],
    "technicalNotes": "Add 'is_excluded' boolean and 'exclusion_reason' text field to prospects table. Use soft delete pattern. Index for performance.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "093",
    "project": "Sales Genie",
    "epic": "crm",
    "priority": "HIGH",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need to select prospects for email campaigns so that I can target specific segments",
    "acceptanceCriteria": [
      "Create campaign selection from filtered prospects view",
      "Save selections as named segments/lists",
      "Show selected count and estimated reach",
      "Preview selected prospects before creating campaign",
      "Combine multiple filters for advanced segmentation",
      "Save filter combinations as templates",
      "Dynamic segments (auto-update as new prospects match criteria)",
      "Static segments (fixed list at creation time)",
      "Exclude already-contacted prospects option",
      "Validate minimum selection size (e.g., need at least 1 prospect)"
    ],
    "effort": 5,
    "businessValue": 9,
    "dependencies": ["089", "092"],
    "technicalNotes": "Create 'segments' table with filter_criteria JSON field. Use PostgreSQL JSONB queries for dynamic segments. Link segments to campaigns table.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "094",
    "project": "Sales Genie",
    "epic": "agents",
    "priority": "CRITICAL",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need AI-generated email campaign sequences so that I can create personalized outreach at scale",
    "acceptanceCriteria": [
      "Generate email sequence of 1-15 emails",
      "AI analyzes prospect data (role, company, industry) for personalization",
      "Each email has: subject line, body, delay timing",
      "Sequence follows best practices (value-first, no hard sell in email 1)",
      "Multiple tone options: Professional, Casual, Direct, Friendly",
      "Industry-specific templates",
      "A/B test variant generation for subject lines",
      "Incorporate user's company value proposition",
      "Follow-up emails reference previous emails in sequence",
      "Generate campaigns in <30 seconds"
    ],
    "effort": 13,
    "businessValue": 10,
    "dependencies": ["002", "093"],
    "technicalNotes": "Use Mistral-7B with custom prompts. Create prompt templates per industry. Store sequence templates in database. Use structured output for consistent JSON format. Consider using GPT-4 for higher quality if budget allows.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "095",
    "project": "Sales Genie",
    "epic": "crm",
    "priority": "CRITICAL",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need to review and edit AI-generated campaigns so that I can ensure quality before sending",
    "acceptanceCriteria": [
      "Campaign preview shows all emails in sequence",
      "Edit subject line and body for each email",
      "Rich text editor with formatting options",
      "Personalization variables visible and editable ({{firstName}}, {{company}}, etc.)",
      "Preview how email renders for different prospects",
      "Test send to user's own email",
      "Save as draft for later editing",
      "Duplicate campaign to create variants",
      "Version history (track changes)",
      "Approval workflow (mark as reviewed/approved)"
    ],
    "effort": 8,
    "businessValue": 9,
    "dependencies": ["094"],
    "technicalNotes": "Use TipTap or Quill for rich text editing. Store campaigns in draft status. Implement mustache/handlebars for variable substitution. Store versions in separate table.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "096",
    "project": "Sales Genie",
    "epic": "crm",
    "priority": "HIGH",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need email sequence timing controls so that campaigns feel natural and avoid spam filters",
    "acceptanceCriteria": [
      "Set delay between emails (hours or days)",
      "Randomize send times within window (e.g., 9am-5pm Â±30min)",
      "Respect business hours per timezone",
      "Skip weekends option",
      "Maximum emails per day per sender (rate limiting)",
      "Stop sequence on reply (don't send follow-ups)",
      "Stop sequence on bounce/unsubscribe",
      "Pause/resume campaigns",
      "Preview full timeline before launch",
      "Override timing for urgent campaigns"
    ],
    "effort": 8,
    "businessValue": 9,
    "dependencies": ["094"],
    "technicalNotes": "Implement job scheduler with node-cron or Bull. Store next_send_time for each prospect-campaign. Check reply status before each send. Use timezone library (moment-timezone) for geography-aware timing.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "097",
    "project": "Sales Genie",
    "epic": "compliance",
    "priority": "CRITICAL",
    "status": "NOT_STARTED",
    "userStory": "As a system, I need email validation and compliance checks so that we maintain high deliverability and legal compliance",
    "acceptanceCriteria": [
      "Validate email format before sending",
      "Check for disposable/temporary email domains",
      "Verify MX records exist for domain",
      "Auto-add unsubscribe link to every email (CAN-SPAM)",
      "Include physical mailing address in footer",
      "Unsubscribe processing within 10 business days",
      "Suppress list for unsubscribed emails (global)",
      "Bounce handling (hard bounce = remove, soft bounce = retry)",
      "Spam score checking before send",
      "GDPR consent tracking and evidence storage"
    ],
    "effort": 8,
    "businessValue": 10,
    "dependencies": ["094"],
    "technicalNotes": "Use email-validator npm package and DNS lookup for MX records. Integrate with email verification API (NeverBounce, ZeroBounce). Create suppression_list table. Implement webhook handlers for bounces/unsubscribes.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "098",
    "project": "Sales Genie",
    "epic": "integration",
    "priority": "CRITICAL",
    "status": "NOT_STARTED",
    "userStory": "As Outreach Agent, I need email sending infrastructure so that I can send campaigns at scale",
    "acceptanceCriteria": [
      "SMTP integration (SendGrid, AWS SES, or Mailgun)",
      "Support multiple sender email accounts",
      "Rotate between sender accounts for volume",
      "Track sending status per email (queued, sent, failed)",
      "Retry logic for failed sends",
      "Email tracking pixels for opens",
      "Link tracking for clicks",
      "Unsubscribe link injection",
      "Rate limiting per account (avoid spam filters)",
      "Sending dashboard with real-time status"
    ],
    "effort": 13,
    "businessValue": 10,
    "dependencies": ["006", "094", "097"],
    "technicalNotes": "Use Nodemailer with SMTP pool. Implement round-robin account rotation. Use Bull queue for sending jobs. Store tracking pixels as 1x1 transparent GIF with unique ID. Use URL shortener for click tracking.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "099",
    "project": "Sales Genie",
    "epic": "analytics",
    "priority": "CRITICAL",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need email open rate tracking so that I can measure engagement",
    "acceptanceCriteria": [
      "Embed invisible tracking pixel in every email",
      "Record open events with timestamp",
      "Track unique opens vs total opens",
      "Capture device type (mobile, desktop)",
      "Capture email client (Gmail, Outlook, etc.)",
      "Capture geographic location (IP-based)",
      "Display open rate per campaign",
      "Display open rate per email in sequence",
      "Display open rate per prospect",
      "Real-time dashboard updates"
    ],
    "effort": 5,
    "businessValue": 9,
    "dependencies": ["098"],
    "technicalNotes": "Use base64 encoded 1x1 GIF with unique tracking ID. Store opens in email_events table with event_type='open'. Extract user-agent for device/client detection. Use IP geolocation API for location.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "100",
    "project": "Sales Genie",
    "epic": "integration",
    "priority": "HIGH",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need email response monitoring so that I can see which prospects replied",
    "acceptanceCriteria": [
      "Connect to sender email inbox via IMAP/API",
      "Monitor inbox for replies to sent emails",
      "Match replies to original campaigns using Message-ID headers",
      "Extract reply content and store in database",
      "Flag prospects who replied in prospects table",
      "Stop email sequence immediately on reply",
      "Notify user of new replies (in-app notification)",
      "Display reply thread in UI",
      "Sentiment analysis of replies (positive, neutral, negative)",
      "Auto-tag replies (interested, not interested, out of office, etc.)"
    ],
    "effort": 13,
    "businessValue": 10,
    "dependencies": ["098"],
    "technicalNotes": "Use node-imap or Gmail API for inbox monitoring. Poll every 5 minutes. Store In-Reply-To and References headers for threading. Use simple sentiment analysis with natural or compromise npm. Create email_replies table.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "101",
    "project": "Sales Genie",
    "epic": "crm",
    "priority": "HIGH",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need response qualification workflow so that I can prioritize hot leads",
    "acceptanceCriteria": [
      "Auto-categorize replies: Hot Lead, Warm Lead, Not Interested, Out of Office, Bounce",
      "Move qualified leads to separate pipeline",
      "Assign lead score based on reply sentiment and content",
      "Manual override for auto-categorization",
      "Notify sales rep of hot leads immediately",
      "Create task/reminder for follow-up",
      "Track response rate per campaign",
      "Display response timeline in prospect view",
      "Export qualified leads for CRM import",
      "Integration with calendar for meeting scheduling"
    ],
    "effort": 8,
    "businessValue": 9,
    "dependencies": ["100"],
    "technicalNotes": "Use keyword matching and sentiment for auto-categorization. Store lead_score in prospects table. Create tasks table for follow-ups. Implement webhooks for CRM integration (HubSpot, Salesforce).",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "102",
    "project": "Sales Genie",
    "epic": "integration",
    "priority": "HIGH",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need Linked Helper export import so that I can bring LinkedIn prospect data into Sales Genie",
    "acceptanceCriteria": [
      "Support Linked Helper CSV export format",
      "Map Linked Helper fields to Sales Genie schema (Name, Role, Company, LinkedIn URL, etc.)",
      "Deduplicate against existing prospects (by LinkedIn URL or email)",
      "Tag prospects with source = 'Linked Helper'",
      "Store LinkedIn profile URL for each prospect",
      "Import connection status (1st degree, 2nd degree, etc.)",
      "Import message history from Linked Helper",
      "Validate and clean data during import",
      "Show import summary (new records, duplicates, errors)",
      "Support bulk imports of 2,500+ records"
    ],
    "effort": 5,
    "businessValue": 9,
    "dependencies": ["015", "089"],
    "technicalNotes": "Parse CSV with papaparse npm. Use LinkedIn URL as unique identifier for deduplication. Store import metadata (date, source, batch ID). Handle encoding issues (UTF-8).",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "103",
    "project": "Sales Genie",
    "epic": "orchestration",
    "priority": "HIGH",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need LinkedIn-Email campaign coordination so that I can run multi-channel outreach",
    "acceptanceCriteria": [
      "Define campaign channels: Email Only, LinkedIn Only, Email + LinkedIn",
      "LinkedIn touchpoints tracked manually (connection request sent, message sent, reply received)",
      "Coordinate timing: LinkedIn first, then email (or vice versa)",
      "Avoid duplicate outreach (don't email if LinkedIn reply received)",
      "Track LinkedIn engagement separately (profile views, connection accepts, message replies)",
      "Manual checklist for LinkedIn actions (since Linked Helper is external)",
      "Export prospects for Linked Helper campaigns",
      "Import LinkedIn activity logs from Linked Helper",
      "Display unified timeline of all touchpoints (email + LinkedIn)",
      "Campaign performance by channel"
    ],
    "effort": 13,
    "businessValue": 9,
    "dependencies": ["102", "098"],
    "technicalNotes": "Create touchpoints table with channel field (email, linkedin). Manual logging UI for LinkedIn actions. CSV export format compatible with Linked Helper import. Build unified activity timeline view with React.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "104",
    "project": "Sales Genie",
    "epic": "crm",
    "priority": "HIGH",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need multi-rep email account management so that I can run campaigns for multiple SDRs/BDRs",
    "acceptanceCriteria": [
      "Add multiple sender email accounts to system",
      "Associate each account with a rep (name, role, signature)",
      "Store SMTP credentials securely (encrypted)",
      "Test email account connectivity",
      "Set sending limits per account (e.g., 200 emails/day)",
      "Rotate between accounts for large campaigns",
      "Track usage per account (sent count, quota remaining)",
      "Account health monitoring (deliverability score, bounce rate)",
      "Disable unhealthy accounts automatically",
      "Rep-specific email templates and signatures"
    ],
    "effort": 8,
    "businessValue": 8,
    "dependencies": ["098"],
    "technicalNotes": "Create sender_accounts table with encrypted credentials (crypto module). Use round-robin or weighted distribution for account selection. Monitor bounce rates per account. Implement account health score algorithm.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "105",
    "project": "Sales Genie",
    "epic": "crm",
    "priority": "MEDIUM",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need per-rep campaign assignment so that prospects are distributed across sales team",
    "acceptanceCriteria": [
      "Assign prospects to specific reps",
      "Auto-distribute prospects (round-robin, by territory, by industry)",
      "Rep-specific campaign views (see only my campaigns)",
      "Rep-specific response inbox",
      "Manager view to see all reps' campaigns",
      "Reassign prospects between reps",
      "Track rep performance (emails sent, replies, meetings booked)",
      "Rep quotas and goals",
      "Leaderboard/gamification",
      "Rep availability calendar (don't send when rep is on vacation)"
    ],
    "effort": 8,
    "businessValue": 7,
    "dependencies": ["104"],
    "technicalNotes": "Add assigned_rep_id to prospects and campaigns tables. Implement role-based access control (RBAC). Use PostgreSQL row-level security for data isolation. Create rep_performance materialized view for analytics.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "106",
    "project": "Sales Genie",
    "epic": "crm",
    "priority": "CRITICAL",
    "status": "NOT_STARTED",
    "userStory": "As a system, I need prospect deduplication so that we don't contact the same person multiple times",
    "acceptanceCriteria": [
      "Detect duplicates by: Email, LinkedIn URL, Name + Company",
      "Fuzzy matching for similar names/companies",
      "Show duplicate warnings before import",
      "Merge duplicate records (keep best data from each)",
      "Merge history tracking",
      "Manual duplicate marking/unmarking",
      "Prevent sending campaigns to duplicates",
      "Global suppression list across all imports",
      "Duplicate detection runs on every import automatically",
      "Configure matching sensitivity (strict, moderate, loose)"
    ],
    "effort": 8,
    "businessValue": 10,
    "dependencies": ["089", "102"],
    "technicalNotes": "Use fuzzyset.js or string-similarity npm for fuzzy matching. Create deduplication job that runs post-import. Store canonical record ID in duplicates. Use PostgreSQL DISTINCT ON for querying unique records.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "107",
    "project": "Sales Genie",
    "epic": "crm",
    "priority": "HIGH",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need data quality scoring so that I can prioritize high-quality prospects",
    "acceptanceCriteria": [
      "Quality score 0-100 for each prospect",
      "Score factors: Email verified, Phone present, Company size known, Industry known, Role seniority",
      "Visual indicator (color/badge) for quality tier (High, Medium, Low)",
      "Filter by quality score",
      "Sort by quality score",
      "Flag incomplete records for manual review",
      "Auto-enrich low-quality records suggestion",
      "Quality score updates in real-time as data improves",
      "Bulk quality check on import",
      "Export quality report"
    ],
    "effort": 5,
    "businessValue": 8,
    "dependencies": ["089", "091"],
    "technicalNotes": "Create quality_score calculated field. Algorithm: +20 verified email, +15 phone, +20 company size, +15 industry, +30 role seniority. Store as integer 0-100. Index for sorting performance.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "108",
    "project": "Sales Genie",
    "epic": "infrastructure",
    "priority": "HIGH",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need email deliverability infrastructure so that emails reach inboxes not spam",
    "acceptanceCriteria": [
      "SPF record verification for sender domains",
      "DKIM signing for all outbound emails",
      "DMARC policy enforcement",
      "Email warmup schedule for new domains (gradual volume ramp)",
      "Monitor sender reputation scores",
      "Bounce rate monitoring and alerts (>5% = danger)",
      "Spam complaint rate monitoring (<0.1% target)",
      "Feedback loop integration with ISPs",
      "Blacklist monitoring (check against major blacklists)",
      "Automatic domain rotation if reputation drops"
    ],
    "effort": 8,
    "businessValue": 10,
    "dependencies": ["098"],
    "technicalNotes": "Use DNS lookup to verify SPF/DKIM/DMARC. Implement warmup schedule: Day 1-5: 20/day, Day 6-10: 50/day, Day 11-20: 100/day, Day 21+: 200/day. Monitor via SendGrid/AWS SES reputation APIs. Use MXToolbox API for blacklist checking.",
    "owner": "DevOps",
    "isNext": true
  },
  {
    "id": "109",
    "project": "Sales Genie",
    "epic": "crm",
    "priority": "HIGH",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need campaign test mode so that I can validate campaigns before production send",
    "acceptanceCriteria": [
      "Test mode sends to internal email addresses only",
      "Test with real prospect data (preview personalization)",
      "Send test to multiple team members for review",
      "Test mode clearly labeled in UI",
      "Cannot accidentally send test campaigns to prospects",
      "Test send includes all tracking pixels/links",
      "Validate all personalization variables render correctly",
      "Check for broken links in test emails",
      "Spam score check on test emails",
      "Approval required to move from test to production"
    ],
    "effort": 5,
    "businessValue": 9,
    "dependencies": ["095", "098"],
    "technicalNotes": "Add is_test_mode boolean to campaigns table. Override recipient emails in test mode. Use mail-tester.com API for spam score checking. Implement link validation with axios HEAD requests.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "110",
    "project": "Sales Genie",
    "epic": "crm",
    "priority": "HIGH",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need campaign pause/stop controls so that I can halt problematic campaigns",
    "acceptanceCriteria": [
      "Pause campaign (stops new sends, can resume later)",
      "Stop campaign (permanently halts, cannot resume)",
      "Stop individual prospect in campaign (while others continue)",
      "Emergency stop button (halts all campaigns immediately)",
      "Resume paused campaigns from where they left off",
      "Schedule campaign start time (don't start immediately)",
      "Auto-pause on high bounce rate (>5%)",
      "Auto-pause on high unsubscribe rate (>1%)",
      "Pause notification to campaign owner",
      "Audit log of all pause/stop actions"
    ],
    "effort": 5,
    "businessValue": 9,
    "dependencies": ["098"],
    "technicalNotes": "Add campaign_status field: active, paused, stopped. Check status before each send in queue. Store pause_reason and paused_by. Implement threshold monitoring job that auto-pauses campaigns.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "111",
    "project": "Sales Genie",
    "epic": "analytics",
    "priority": "HIGH",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need campaign performance dashboard so that I can measure ROI and optimize campaigns",
    "acceptanceCriteria": [
      "Campaign-level metrics: Sent, Delivered, Opened, Clicked, Replied, Bounced, Unsubscribed",
      "Email-level metrics (for each email in sequence)",
      "Conversion funnel visualization",
      "Open rate, click rate, reply rate percentages",
      "Time-series charts (performance over time)",
      "Compare campaigns side-by-side",
      "Best performing subject lines",
      "Best performing send times",
      "Geographic performance breakdown",
      "Export reports to PDF/CSV"
    ],
    "effort": 8,
    "businessValue": 9,
    "dependencies": ["099", "100"],
    "technicalNotes": "Create campaign_stats materialized view for performance. Use Chart.js or Recharts for visualizations. Aggregate metrics in background job (hourly). Use PostgreSQL window functions for time-series analysis.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "112",
    "project": "Sales Genie",
    "epic": "integration",
    "priority": "MEDIUM",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need CRM integration so that qualified leads flow into existing sales pipeline",
    "acceptanceCriteria": [
      "Export qualified leads to HubSpot CRM",
      "Export qualified leads to Salesforce",
      "Two-way sync of lead status updates",
      "Map Sales Genie fields to CRM fields",
      "Automatic lead creation in CRM on positive reply",
      "Manual export option for selected prospects",
      "Sync frequency configuration (real-time, hourly, daily)",
      "Error handling for failed syncs",
      "Sync history and audit log",
      "Prevent duplicate leads in CRM"
    ],
    "effort": 13,
    "businessValue": 8,
    "dependencies": ["101"],
    "technicalNotes": "Use HubSpot API and Salesforce API. Implement OAuth2 authentication. Store CRM IDs in prospects table for syncing. Use webhooks for real-time updates. Create sync_log table for debugging.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "113",
    "project": "Sales Genie",
    "epic": "crm",
    "priority": "MEDIUM",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need A/B testing capability so that I can optimize email performance",
    "acceptanceCriteria": [
      "Create A/B test variants (2-5 variants)",
      "Test variables: Subject line, email body, sender name, send time",
      "Split traffic evenly or custom percentage allocation",
      "Define success metric (open rate, click rate, reply rate)",
      "Statistical significance calculation",
      "Auto-select winner after minimum sample size",
      "Continue campaign with winning variant",
      "Visual comparison of variant performance",
      "Test history and learnings repository",
      "Apply winning insights to future campaigns"
    ],
    "effort": 8,
    "businessValue": 7,
    "dependencies": ["098", "111"],
    "technicalNotes": "Create campaign_variants table. Use chi-square test for statistical significance. Minimum 100 sends per variant before declaring winner. Store variant assignment in email_sends table.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "114",
    "project": "Sales Genie",
    "epic": "crm",
    "priority": "MEDIUM",
    "status": "NOT_STARTED",
    "userStory": "As a user, I need email template library so that I can reuse high-performing emails",
    "acceptanceCriteria": [
      "Save any email as template",
      "Template categories (introduction, follow-up, value proposition, meeting request, etc.)",
      "Tag templates by industry, role, use case",
      "Search templates by keyword",
      "Preview template with sample data",
      "Template performance metrics (avg open rate, reply rate)",
      "Share templates across team",
      "Template versioning",
      "Clone and customize templates",
      "Import/export templates"
    ],
    "effort": 5,
    "businessValue": 7,
    "dependencies": ["095"],
    "technicalNotes": "Create email_templates table with content, metadata, and performance stats. Use full-text search (PostgreSQL tsvector) for keyword search. Store template variables for personalization.",
    "owner": "Development",
    "isNext": true
  },
  {
    "id": "115",
    "project": "Sales Genie",
    "epic": "analytics",
    "priority": "MEDIUM",
    "status": "NOT_STARTED",
    "userStory": "As a sales manager, I need team performance analytics so that I can coach reps and optimize strategy",
    "acceptanceCriteria": [
      "Rep leaderboard (by replies, meetings booked, pipeline generated)",
      "Rep activity tracking (emails sent, campaigns launched)",
      "Rep response time to hot leads",
      "Rep conversion rates by stage",
      "Team aggregate metrics",
      "Benchmark against team average",
      "Identify coaching opportunities (low performers)",
      "Identify best practices (top performers)",
      "Weekly/monthly performance reports",
      "Export for executive reporting"
    ],
    "effort": 8,
    "businessValue": 6,
    "dependencies": ["104", "105", "111"],
    "technicalNotes": "Create rep_performance_stats materialized view. Use PostgreSQL RANK() window function for leaderboards. Schedule weekly report generation job. Use Chart.js for performance visualizations.",
    "owner": "Development",
    "isNext": true
  }
]
